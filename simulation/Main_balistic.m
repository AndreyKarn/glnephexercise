 clear; close all; clc;
 format long
 omega_z = 7.2921151467e-5; % средняя угловая скорость вращения Земли относительно т. ВР [рад/с]
 A_e = 6378136; % большая полуось общеземного эллипсоида [м]
 GM = 398600441.8e6; % геоцентр. конст. грав. поля Земли с учетом атмосф. [м^3/c^2]
 J_2 = 1082625.75e-9; % зональный гармонический коэф. второй степени
delta_t = 1;
%% Данные эфимирид
x = 10584969.2383; % координата Х в системе ПЗ_90 [m]
y = 2721713.86719; % координата Y в системе ПЗ_90 [m]
z = 23027096.6797; % координата Z в системе ПЗ_90 [m]
V_x = -788.876533508; % скорость по Х в системе ПЗ_90 [m/s]
V_y = 3058.68911743; % скорость по Y в системе ПЗ_90 [m/s]
V_z = 1.50871276855; % скорость по Z в системе ПЗ_90 [m/s]
a_x = 0; % ускорение по Х в системе ПЗ_90 [m/s^2]
a_y = 0; % ускорение по Y в системе ПЗ_90 [m/s^2]
a_z = -372.529029846e-9; % ускорение по Z в системе ПЗ_90 [m/s^2]

Year = 2020; % год по UTC
Month = 2; % месяц по UTC
Day = 10; % день по UTC
Hour = 13; % час по UTC
Min = 45; % минута по UTC
Sec  = 0; % секунда по UTC

%% Перевод в МДВ времен прогноза
t_start = (12+3)*60*60; % время начала прогноза указывать в МДВ
t_end = (24+3)*60*60; % время окончания прогноза указывать в МДВ
Day_start = 10; % день начала прогноза (должен совпадать с днем прихода эфемерид) указывать в МДВ
%% Пересчет в МДВ времени эфемеридных данных
if Hour+3 < 24 % учет перехода на МДВ
    Hour = Hour+3;
else
    Hour = (Hour+3)-24;
    Day = Day+1;
end
N_ch = ceil((Year-1995)/4); % номер четырехлетия по эфем.
if mod((Year-1995),4) == 1
   vis = [31 31+29 31+29+31 31+29+31 31+29+31+30 31+29+31+30+31 ...
       31+29+31+30+31+30 31+29+31+30+31+30+31 31+29+31+30+31+30+31+31 ...
       31+29+31+30+31+30+31+31+30 31+29+31+30+31+30+31+31+30+31 ...
       31+29+31+30+31+30+31+31+30+31+30 31+29+31+30+31+30+31+31+30+31+30+31];
   N_t = vis(1,Month-1) + Day; % номер суток от начала четырехлетия по эфем.
else
   N_t = 365*(mod((Year-1995),4)-1)+1;
   n_vis = [31 31+29 31+28+31 31+29+31 31+29+31+30 31+29+31+30+31 ...
       31+29+31+30+31+30 31+29+31+30+31+30+31 31+29+31+30+31+30+31+31 ...
       31+29+31+30+31+30+31+31+30 31+29+31+30+31+30+31+31+30+31 ...
       31+29+31+30+31+30+31+31+30+31+30 31+29+31+30+31+30+31+31+30+31+30+31];
   N_t = N_t + n_vis(1,Month-1) + Day; % номер суток от начала четырехлетия по эфем.
end
t_e = Hour*60*60 + Min*60 + Sec; % номер секунды от начала суток по эфем.
%% Трансформация координат, скоростей и ускорений из ПЗ-90 в инерц. геоцентричекую СК
% Вычислим среднее звездное время по Гринвичу
JD0 = 1461*(N_ch - 1) + N_t + 2450082.5; % текущая Юлианская дата на 0 часов шкалы МДВ
ERA = 2*pi*(0.7790572732640 + 1.00273781191135448*(JD0 - 2451545)); % угол поворота Земли [рад]
delta_T = (JD0 - 2451545)/36525; % время от эпохи 2000 г 1 января 12 ч (UTC(SU))
% до текущей эпохи в Юлианских столетиях по 36525 эфемеридных суток
GMST = ERA + 0.0000000703270726 + 0.0223603658710194*delta_T ...
     + 0.0000067465784654*delta_T^2 - 0.0000000000021332*delta_T^3 ...
     - 0.0000000001452308*delta_T^4 - 0.000000000001784*delta_T^5; % среднее зв-е время по Гринвичу [рад]
S = GMST + omega_z*(t_e - 10800);
x = x*cos(S) - y*sin(S);
y = x*sin(S) + y*cos(S);
V_x = V_x*cos(S) - V_y*sin(S) - omega_z*y;
V_y = V_x*sin(S) + V_y*cos(S) + omega_z*x;
JJ_x = a_x*cos(S) - a_y*sin(S);
JJ_y = a_x*sin(S) + a_y*cos(S);
JJ_z = a_z;
%% В нашем случае необходимо дать прогноз на момент ранее данных эфемерид.
% функция Optimization подстраивает параметры относительно времени прогноза
% и времени эфемеридных данных и сразу вычисляет методом Рунге-Кутты
% положение КА
VECTOR = Optimization(x,y,z,V_x,V_y,V_z,J_2,JJ_x,JJ_y,JJ_z,A_e,GM,delta_t,t_start,t_e,t_end);
t = VECTOR(1,:);
VECTOR = VECTOR(2:end,:);
clear x y z V_x V_y V_z JJ_x JJ_y JJ_z t1 t2 VECTOR1 VECTOR2
[X_erth,Y_erth,Z_erth] = sphere(40); % сфера обозначающая Землю
X_erth =  (A_e/1e3).*X_erth;
Y_erth =  (A_e/1e3).*Y_erth;
Z_erth =  (A_e/1e3).*Z_erth;

VECTOR = VECTOR./1e3;% переход к километрам

figure(1)
surf(X_erth,Y_erth,Z_erth)
grid on
hold on
plot3(VECTOR(1,:),VECTOR(2,:),VECTOR(3,:))
title({'Траектория движения КА 13 ГЛОНАСС,' ; 'в инерциальной системе координат'})
xlabel('X,км')
ylabel('Y,км')
zlabel('Z,км')

S = GMST + omega_z.*(t - 10800); 
X_PZ90 = VECTOR(1,:).*cos(S) + VECTOR(2,:).*sin(S);
Y_PZ90 = -VECTOR(1,:).*sin(S) + VECTOR(2,:).*cos(S);

VECTOR(1,:) = X_PZ90;
VECTOR(2,:) = Y_PZ90;
clear X_PZ90 Y_PZ90


figure(2)
surf(X_erth,Y_erth,Z_erth)
grid on
hold on
plot3(VECTOR(1,:),VECTOR(2,:),VECTOR(3,:))
title({'Траектория движения КА 13 ГЛОНАСС,' ; 'в системе ПЗ-90'})
xlabel('X,км')
ylabel('Y,км')
zlabel('Z,км')

%% Переведем полученные для спутника координаты в систему WGS-84
VECTOR = VECTOR(1:3,:).*1e3; % переход к метрам
R_WGS_84 = [-19 -4 353]; % [mas] это миллисекунда в угловых единицах измерения
T_WGS_84 = [7 -0 -77]; % [см]
D_WGS_84 = -3; % [ppd] или одна миллиардная часть величины

R_WGS_84 = ((R_WGS_84/1e3)./206264.8); % [рад]
T_WGS_84 = T_WGS_84./100; % [м]
D_WGS_84 = D_WGS_84/1e9;
for i = 1:length(VECTOR(1,:))
    VECTOR(:,i) =  VECTOR(:,i) + T_WGS_84' ...
        + [D_WGS_84 -R_WGS_84(1,3) R_WGS_84(1,2); ...
           R_WGS_84(1,3) D_WGS_84 -R_WGS_84(1,1); ...
          -R_WGS_84(1,2) R_WGS_84(1,1) D_WGS_84]* VECTOR(:,i);
end

VECTOR = VECTOR(1:3,:)./1e3; % переход к км
figure(3)
surf(X_erth,Y_erth,Z_erth)
grid on
hold on
plot3(VECTOR(1,:),VECTOR(2,:),VECTOR(3,:))
title({'Траектория движения КА 13 ГЛОНАСС,' ; 'в системе WGS-84'})
xlabel('X,км')
ylabel('Y,км')
zlabel('Z,км')

%% Географические координаты корпуса Е и их перевод в систему WGS-84
N_gr = 55;
N_min = 45;
N_sec = 23.5896;
E_gr = 37;
E_min = 42;
E_sec = 11.5028;
H = 500;% высота в метрах
N = N_gr*pi/180 + N_min/3437.747 + N_sec/206264.8; % широта в радионах
E = E_gr*pi/180 + E_min/3437.747 + E_sec/206264.8; % долгота в радионах
llh = [N E H];
PRM_coor = llh2xyz(llh)';

VECTOR = VECTOR(1:3,:).*1e3; % переход к метрам
 
 %% Постороение SkyPlot
for i=1:length(VECTOR(1,:))
    [x(i) y(i) z(i)] = ecef2enu(VECTOR(1,i),VECTOR(2,i),VECTOR(3,i),N,E,H,wgs84Ellipsoid,'radians');
    if z(i) > 0
     teta(i) = atan2(sqrt(x(i)^2 + y(i)^2),z(i));
     r(i) = sqrt(x(i)^2 + y(i)^2 + z(i)^2);
     phi(i) = atan2(y(i),x(i));
     else teta(i) = NaN;
     r(i) = NaN;
     phi(i) = NaN;
    end
end

figure(4);
polar(phi,(teta*180-pi)/pi,'r')
title('Sky PLot КА 13 ГЛОНАСС')